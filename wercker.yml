# This references an Maven container from the
# Docker Hub https://hub.docker.com/_/maven/
# Read more about containers on our dev center
# https://devcenter.wercker.com/overview-and-core-concepts/containers/
box: maven:3.5.4-jdk-8-alpine
services:
  - id: postgres
    env:
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_DB: quiz_app

# This is the build pipeline. Pipelines are the core of wercker
# Read more about pipelines on our dev center
# https://devcenter.wercker.com/development/pipelines/
build:
    # Steps make up the actions in your pipeline
    # Read more about steps on our dev center:
    # https://devcenter.wercker.com/development/steps/
  steps:
    # Getting the environment variables
    # - script:
       # name: env
       # code: env
    # Install with skip tests
    # https://github.com/wercker/step-maven
    - wercker/maven:
      goals: clean install -DskipTests=true
      cache_repo: true
unit-test:
  steps:
    # Unit testing
    - wercker/maven:
      goals: test
      cache_repo: true
integration-test:
  steps:
    # Set up the database
    - script:
       name: set up db
       code: |
         export POSTGRE_DATASOURCE_URL=jdbc:postgresql://$POSTGRES_PORT_5432_TCP_ADDR:$POSTGRES_PORT_5432_TCP_PORT/$POSTGRES_ENV_POSTGRES_DB
         export POSTGRE_DATASOURCE_PASSWORD=$POSTGRES_ENV_POSTGRES_PASSWORD
         export POSTGRE_DATASOURCE_USERNAME=$POSTGRES_ENV_POSTGRES_USER
    # Integration testing
    # integration-test -> runs the integration tests of an application
    # verify -> verifies that the integration tests of an application passed
    - wercker/maven:
      goals: verify
      cache_repo: true
sonar:
  steps:
    # Analyze the source code
    - script:
       name: sonar
       code: |
         mvn -Dmaven.repo.local=$WERCKER_CACHE_DIR/.m2 sonar:sonar \
         -Dsonar.projectKey=quiz-api \
         -Dsonar.organization=vescuderog-github \
         -Dsonar.host.url=https://sonarcloud.io \
         -Dsonar.login=$LOGIN
publish:
  steps:
    # Creating a Docker image using a Dockerfile
    - internal/docker-build:
       dockerfile: Dockerfile
       image-name: quiz-image
    # Publish the package (jar) on Docker Hub
    - internal/docker-push:
       image-name: quiz-image
       username: $USERNAME
       password: $PASSWORD
       registry: https://cloud.docker.com
       repository: $USERNAME/quiz-api
deploy:
  steps:
    # Install the required dependencies
    - script:
       name: install dependencies
       code: |
         apk update \
         && apk add --no-cache \
         git \
         openssh
    # Deploy api on heroku (integration environment)
    - heroku-deploy:
        key: $HEROKU_KEY
        key-name: DEPLOY_KEY
        user: $HEROKU_USER
        app-name: api-quiz-app
acceptance-test:
  box: python:3.7.2-alpine
  steps:
    # Checking the python version
    - script:
        name: python information
        code: |
          echo "python version $(python --version) running"
          echo "pip version $(pip --version) running"
    # Install the required dependencies
    # Clone and install the qa project (python)
    - script:
       name: set up qa project
       code: |
         apk update && apk add --no-cache git
         git clone https://$GIT_HUB_USER:$GIT_HUB_TOKEN@github.com/vescuderog/quiz-api-qa.git
         cd quiz-api-qa
         pip3 install -r requirements.txt
    # Acceptance testing
    - script:
       name: acceptance test
       code: |
         pytest
